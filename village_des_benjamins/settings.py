"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
import datetime
from django.utils.translation import gettext_lazy as _
import dj_database_url
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "bk7%s=p+f5uez#u!2qir!mcpk0)x4(-0%vr#s9c(dx*&#q(-41"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "true") == "true"

ALLOWED_HOSTS = os.getenv(
    "ALLOWED_HOSTS", "village-des-benjamins.be,localhost,localhost:8000,localhost:8080"
).split(",")

# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_better_admin_arrayfield",
    "ordered_model",
    "tinymce",
    "colorfield",
    "members",
    "section",
    "holiday",
    "site_content",
    "parent_messages",
    "django_rest_passwordreset",
]

AUTH_USER_MODEL = "members.User"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "village_des_benjamins.urls"
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: True,
}

TEMPLATES_DIR = BASE_DIR / "dist"
FRONTEND_DIR = BASE_DIR / "frontend"
STATICFILES_DIRS = [
    (BASE_DIR / "dist"),
]
STATIC_ROOT = BASE_DIR / "staticfiles"
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            TEMPLATES_DIR,
            "village_des_benjamins/templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "village_des_benjamins.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default="postgresql://postgres:postgres@localhost/postgres"
    )
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/
LANGUAGES = [["fr", _("French")]]
LANGUAGE_CODE = "fr"

TIME_ZONE = "UTC"

USE_I18N = True


USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"


JAZZMIN_SETTINGS = {
    "site_title": "Administration Village des Benjamins",
    "site_header": "Village des Benjamins",
    "welcome_sign": "Bienvenue sur le portail d'administration du Village des Benjamins",
    "copyright": "Postula Consulting",
    "changeform_format": "vertical_tabs",
    "changeform_format_overrides": {
        "holiday.Registration": "single",
        "holiday.Holiday": "single",
    },
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}


SECURE_SSL_REDIRECT = os.getenv("SSL", "false") == "true"
CORS_SCHEME = "https" if SECURE_SSL_REDIRECT else "http"
CORS_ALLOWED_ORIGINS = list(map(lambda x: f"{CORS_SCHEME}://{x}", ALLOWED_HOSTS))
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "authorizationfb",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Reset Email
DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME = 24
DJANGO_REST_PASSWORDRESET_NO_INFORMATION_LEAKAGE = 200

DRF_RESET_EMAIL = {
    "EMAIL_EXPIRATION_TIME": 24,
    "REDIRECT_LINK": f"{CORS_ALLOWED_ORIGINS[0]}/#/forgot_finalize",
    "EMAIL_PROVIDER": "village_des_benjamins.providers.SendgridEmailProvider",
    "CONTENT_PROVIDER": "reset_password.models.DefaultContentProvider",
}

SIMPLE_JWT = {
    "TOKEN_OBTAIN_SERIALIZER": "village_des_benjamins.auth.TokenObtainPairSerializer",
    "ROTATE_REFRESH_TOKENS": True,
}

AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY", "")

AWS_STORAGE_BUCKET_NAME = os.getenv(
    "AWS_STORAGE_BUCKET_NAME", "village-des-benjamins.be"
)
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "eu-central-1")
AWS_LOCATION = os.getenv("AWS_LOCATION", "website_uploads/")

AWS_S3_MINIO = os.getenv("AWS_S3_MINIO", "false") == "true"
if AWS_S3_MINIO:
    AWS_S3_ENDPOINT_URL = os.getenv("AWS_S3_ENDPOINT_URL")
    AWS_DEFAULT_ACL = None
    AWS_QUERYSTRING_AUTH = True
    AWS_S3_FILE_OVERWRITE = False

SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY", "")

EMAIL_HOST = "smtp.sendgrid.net"
EMAIL_HOST_USER = "apikey"  # this is exactly the value 'apikey'
EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
EMAIL_PORT = 587
EMAIL_USE_TLS = True

SENDGRID_FROM_MAIL = os.getenv(
    "MAIL_FROM_ADDRESS",
)

if not DEBUG:
    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DSN", None),
        integrations=[DjangoIntegration()],
        traces_sample_rate=0.05,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )

TINYMCE_DEFAULT_CONFIG = {
    "menubar": "file edit view insert format tools table help",
    "plugins": "advlist,autolink,lists,link,image,charmap,print,preview,anchor,"
    "searchreplace,visualblocks,code,fullscreen,insertdatetime,media,table,paste,"
    "code,help,wordcount",
    "toolbar": "undo redo | formatselect | "
    "bold italic backcolor | alignleft aligncenter alignright alignjustify |"
    "table tabledelete |"
    "tableprops tablerowprops tablecellprops |"
    "tableinsertrowbefore tableinsertrowafter tabledeleterow |"
    "tableinsertcolbefore tableinsertcolafter tabledeletecol"
    "bullist numlist outdent indent | "
    "removeformat | help",
}

if DEBUG:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")
    INSTALLED_APPS.append("silk")
    MIDDLEWARE.insert(0, "silk.middleware.SilkyMiddleware")
    REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"] += [
        "rest_framework.authentication.SessionAuthentication",
    ]

# Read additional configuration from hc/local_settings.py if it exists
if (BASE_DIR / "village_des_benjamins/local_settings.py").exists():
    from .local_settings import *  # noqa: F403
